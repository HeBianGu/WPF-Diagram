<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:h="https://github.com/HeBianGu"
                    xmlns:local="clr-namespace:HeBianGu.Diagram.Presenter"
                    xmlns:system="clr-namespace:System;assembly=System.Runtime">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/HeBianGu.Diagram.Presenter;component/Presenter/Node/FlowableNodeData.xaml" />
        <ResourceDictionary Source="pack://application:,,,/HeBianGu.Diagram.Presenter;component/Presenter/Node/GeometryNodeData.xaml" />
        <ResourceDictionary Source="pack://application:,,,/HeBianGu.Diagram.Presenter;component/Presenter/Node/ImageNodeData.xaml" />
        <ResourceDictionary Source="pack://application:,,,/HeBianGu.Diagram.Presenter;component/Presenter/Node/TextNodeData.xaml" />
        <ResourceDictionary Source="pack://application:,,,/HeBianGu.Diagram.Presenter;component/Presenter/Node/Card/CardNodeData.xaml" />
        <ResourceDictionary Source="pack://application:,,,/HeBianGu.Diagram.Presenter;component/Presenter/Node/Card/CheckCardNodeData.xaml" />
        <ResourceDictionary Source="pack://application:,,,/HeBianGu.Diagram.Presenter;component/Presenter/Node/Card/FlowableDiagramTemplateNodeData.xaml" />
        <ResourceDictionary Source="pack://application:,,,/HeBianGu.Diagram.Presenter;component/Presenter/Node/Card/LineCardNodeData.xaml" />
        <ResourceDictionary Source="pack://application:,,,/HeBianGu.Diagram.Presenter;component/Presenter/Node/Card/PointCardNodeData.xaml" />
        <ResourceDictionary Source="pack://application:,,,/HeBianGu.Diagram.Presenter;component/Presenter/Node/Card/TitleCardNodeData.xaml" />
        <ResourceDictionary Source="pack://application:,,,/HeBianGu.Diagram.Presenter;component/Presenter/Link/TextLinkData.xaml" />
        <ResourceDictionary Source="pack://application:,,,/HeBianGu.Diagram.Presenter;component/Presenter/Port/FlowablePortData.xaml" />
        <ResourceDictionary Source="pack://application:,,,/HeBianGu.Diagram.Presenter;component/Presenter/Port/TextPortData.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Text,
                                        TypeInTargetAssembly={x:Type local:DiagramKeys}}"
           BasedOn="{StaticResource {x:Type TextBox}}"
           TargetType="TextBox">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Margin" Value="1" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="MinWidth" Value="20" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontSize" Value="{Binding FontSize}" />
        <Setter Property="Foreground" Value="{Binding Foreground}" />
        <Setter Property="FontFamily" Value="{Binding FontFamily}" />
        <Setter Property="FontStretch" Value="{Binding FontStretch}" />
        <Setter Property="FontWeight" Value="{Binding FontWeight}" />
        <Setter Property="FontStyle" Value="{Binding FontStyle}" />
        <Setter Property="Text" Value="{Binding Text}" />
        <Setter Property="AcceptsReturn" Value="True" />
        <Setter Property="CaretBrush">
            <Setter.Value>
                <SolidColorBrush Color="black" />
            </Setter.Value>
        </Setter>
        <Setter Property="SelectionBrush">
            <Setter.Value>
                <SolidColorBrush Color="black" />
            </Setter.Value>
        </Setter>
    </Style>
    <!--<Style x:Key="{ComponentResourceKey ResourceId=S.TextEditor.Text, TypeInTargetAssembly={x:Type local:DiagramKeys}}" BasedOn="{StaticResource {x:Static h:TextEditor.TextKey}}" TargetType="h:TextEditor">
        <Setter Property="DefaultType" Value="{x:Type system:String}" />
        <Setter Property="Content" Value="{Binding Text, Mode=TwoWay}" />
    -->
    <!--<Setter Property="EditText" Value="{Binding Text,Mode=TwoWay}"/>-->
    <!--
        <Setter Property="Foreground" Value="{Binding Foreground, Mode=TwoWay}" />
        <Setter Property="FontFamily" Value="{Binding FontFamily}" />
        <Setter Property="FontStretch" Value="{Binding FontStretch}" />
        <Setter Property="FontStyle" Value="{Binding FontStyle}" />
        <Setter Property="FontWeight" Value="{Binding FontWeight}" />
    -->
    <!--<Setter Property="TextBlock.Foreground" Value="Green"/>
        <Setter Property="TextElement.Foreground" Value="Orange"/>-->
    <!--
        <Setter Property="TextBlockStyle">
            <Setter.Value>
                <Style TargetType="TextBlock">
                    <Setter Property="VerticalAlignment" Value="Center" />
                    <Setter Property="HorizontalAlignment" Value="Center" />
                    <Setter Property="FontSize" Value="{Binding FontSize}" />
                    <Setter Property="TextWrapping" Value="Wrap" />
                    <Setter Property="TextTrimming" Value="CharacterEllipsis" />
    -->
    <!--<Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Text}" />-->
    <!--<Setter Property="Foreground" Value="Red" />-->
    <!--
                    <Setter Property="FontFamily" Value="{Binding FontFamily}" />
                    <Setter Property="FontStretch" Value="{Binding FontStretch}" />
                    <Setter Property="FontStyle" Value="{Binding FontStyle}" />
                    <Setter Property="FontWeight" Value="{Binding FontWeight}" />
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="TextBoxStyle">
            <Setter.Value>
                <Style BasedOn="{StaticResource {x:Static h:TextBoxKeys.Editable}}" TargetType="TextBox">
                    <Setter Property="VerticalAlignment" Value="Stretch" />
                    <Setter Property="HorizontalAlignment" Value="Stretch" />
                    <Setter Property="TextAlignment" Value="Center" />
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                    <Setter Property="FontSize" Value="{Binding FontSize}" />
                    <Setter Property="TextWrapping" Value="Wrap" />
    -->
    <!--<Setter Property="Foreground" Value="Red" />-->
    <!--
                </Style>
            </Setter.Value>
        </Setter>
    </Style>-->



    <!--<DataTemplate DataType="{x:Type local:PropertyNodeData}">
        <Grid Margin="5,5,5,30" local:DragAdornerBehavior.IsUse="{Binding IsTemplate}" Background="Transparent">
    -->
    <!--<Grid.ContextMenu>
                <ContextMenu>
                    <MenuItem Command="{h:RemoveNodeCommand}" CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}}" Header="删除" />
                </ContextMenu>
            </Grid.ContextMenu>-->
    <!--
            <Expander x:Name="boder"
                      Margin="0"
                      Padding="0"
                      h:Cattach.CornerRadius="5"
                      h:Cattach.Icon=""

                      Background="{DynamicResource {x:Static h:BrushKeys.Dark0_4}}"
                      BorderBrush="Transparent"
                      Header="{Binding Name}"
                      Style="{DynamicResource {x:Static h:ExpanderKeys.Single}}">
                <h:Form Background="Transparent"
                                ScrollViewer.VerticalScrollBarVisibility="Disabled"
                                SelectObject="{Binding}"

                                UseGroup="True"
                                UseGroupNames="参数,指标">
                    <ItemsControl.GroupStyle>
                        <GroupStyle>
                            <GroupStyle.ContainerStyle>
                                <Style TargetType="{x:Type GroupItem}">
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type GroupItem}">
                                                <GroupBox Width="400"
                                                          h:Cattach.CaptionHeight="20"
                                                          h:Cattach.Icon=""
                                                          Background="Transparent"
                                                          Header="{Binding Name}"
                                                          Style="{DynamicResource {x:Static h:GroupBoxKeys.System}}">
                                                    <ItemsPresenter />
                                                </GroupBox>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </GroupStyle.ContainerStyle>
                            <GroupStyle.Panel>
                                <ItemsPanelTemplate>
                                    <DataGridRowsPresenter />
                                </ItemsPanelTemplate>
                            </GroupStyle.Panel>
                        </GroupStyle>
                    </ItemsControl.GroupStyle>
                </h:Form>
            </Expander>

            <ProgressBar x:Name="pb"
                         Background="Transparent"
                         Foreground="{DynamicResource {x:Static h:BrushKeys.AccentMouseOverBackground}}"
                         IsIndeterminate="True"
                         Style="{x:Null}"
                         Visibility="{Binding State, Converter={h:GetVisibilityValueConverter VisibleValue={h:GetEnum Value=Running, Type={x:Type h:FlowableState}}, DefaultValue={h:GetVisibility Value=Collapsed}}}" />
        </Grid>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding State}" Value="Success">
                <Setter TargetName="boder" Property="BorderThickness" Value="3" />
                <Setter TargetName="boder" Property="BorderBrush" Value="Green" />
            </DataTrigger>

            <DataTrigger Binding="{Binding State}" Value="Error">
                <Setter TargetName="boder" Property="BorderThickness" Value="3" />
                <Setter TargetName="boder" Property="BorderBrush" Value="Red" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>-->

    <DataTemplate DataType="{x:Type local:DiagramBase}">
        <Grid>
            <Grid x:Name="grid_snapshoot"
                  Background="LightGray">
                <!--<Grid.ContextMenu>
                    <ContextMenu>
                        <ContextMenu.Template>
                            <ControlTemplate>
                                <h:Form h:Cattach.ItemHorizontalAlignment="Stretch"
                                        h:Cattach.TitleWidth="0"
                                        BorderBrush="{DynamicResource {x:Static h:BrushKeys.BorderBrush}}"
                                        SelectObject="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.DataContext}"
                                        UseAsync="True"
                                        UseGroupNames="操作">
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <MenuItem VerticalAlignment="Center"
                                                      VerticalContentAlignment="Center"
                                                      Background="Transparent"
                                                      Command="{Binding Value}"
                                                      CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget}"
                                                      Header="{Binding Name}"
                                                      Icon="{Binding Icon}" />
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </h:Form>
                            </ControlTemplate>
                        </ContextMenu.Template>
                    </ContextMenu>
                </Grid.ContextMenu>-->
                <!--<h:DiagraphBox x:Name="db"
                               AllowDrop="false"
                               Foreground="Gray"
                               GridBackground="{Binding Source={x:Static h:DiagramSetting.Instance}, Path=GridBackground}"
                               GridLineBrush="{Binding Source={x:Static h:DiagramSetting.Instance}, Path=GridLineBrush}"
                               GridMargin="{Binding Source={x:Static h:DiagramSetting.Instance}, Path=GridMargin}"
                               Scale="{Binding ElementName=svt1, Path=Scale}"
                               SmallSplitValue="{Binding Source={x:Static h:DiagramSetting.Instance}, Path=SmallSplit}"
                               SplitBrush="Gray"
                               SplitValue="{Binding Source={x:Static h:DiagramSetting.Instance}, Path=LargeSplit}"
                               UseBottom="{Binding Source={x:Static h:DiagramSetting.Instance}, Path=UseBottom}"
                               UseLeft="{Binding Source={x:Static h:DiagramSetting.Instance}, Path=UseLeft}"
                               UseRight="{Binding Source={x:Static h:DiagramSetting.Instance}, Path=UseRight}"
                               UseSmallSplitVerticalLine="{Binding Source={x:Static h:DiagramSetting.Instance}, Path=UseSmallSplitVerticalLine}"
                               UseSmallSpliteHorizontalLine="{Binding Source={x:Static h:DiagramSetting.Instance}, Path=UseSmallSpliteHorizontalLine}"
                               UseSplitHorizontalLine="{Binding Source={x:Static h:DiagramSetting.Instance}, Path=UseSplitHorizontalLine}"
                               UseSplitVerticalLine="{Binding Source={x:Static h:DiagramSetting.Instance}, Path=UseSplitVerticalLine}"
                               UseText="{Binding Source={x:Static h:DiagramSetting.Instance}, Path=UseText}"
                               UseTop="{Binding Source={x:Static h:DiagramSetting.Instance}, Path=UseTop}" />-->
                <Border Margin="20"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        Background="Transparent">
                    <!--<h:ScrollViewerTransfor x:Name="svt1"
                                            AllowDrop="False"
                                            Background="Transparent"
                                            IsDeferredScrollingEnabled="True"
                                            IsFullParent="False"
                                            LocateCenterCallBack="{Binding LocateCenterCallBack, Mode=TwoWay}"
                                            LocateRectCallBack="{Binding LocateRectCallBack, Mode=TwoWay}"
                                            Location="{Binding Location, Mode=TwoWay}"
                                            MinScale="0.4"
                                            UseDefaultCenter="False">
                        <b:Interaction.Behaviors>
                            <h:MouseGestureScrollViewerBehavior ChangeButton="Middle" />
                            <h:ViewportSynchronizerBehavior HorizontalOffset="{Binding ElementName=db, Path=StartX}" VerticalOffset="{Binding ElementName=db, Path=StartY}" />
                        </b:Interaction.Behaviors>
                        <h:Diagram x:Name="diagram"
                                   Width="{Binding Width}"
                                   Height="{Binding Height}"
                                   Padding="0"
                                   HorizontalAlignment="Stretch"
                                   VerticalAlignment="Stretch"
                                   HorizontalContentAlignment="Stretch"
                                   VerticalContentAlignment="Stretch"
                                   h:Cattach.GuideData="从左侧资源列表中拖动元素放置此区域，选中元素在右侧属性栏和上方工具栏执行相应操作，鼠标拖拽、滚轮放大缩小等"
                                   h:Cattach.GuideTitle="绘图区域"
                                   h:Cattach.UseGuide="True"
                                   AllowDrop="True"
                                   BorderBrush="blue"
                                   BorderThickness="1"
                                   Layout="{Binding Layout}"
                                   LinkDrawer="{Binding LinkDrawer}"
                                   NodesSource="{Binding Nodes}"
                                   SelectedPart="{Binding SelectedPart}"
                                   UseAnimation="False">
                            <h:Diagram.Background>
                                <SolidColorBrush Opacity="0.02" Color="Gray" />
                            </h:Diagram.Background>

                            <b:Interaction.Behaviors>
                                <local:DiagramDropTextNodeBehavior NodeType="{Binding NodeType}" />
                            </b:Interaction.Behaviors>
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="ItemsChanged">
                                    <b:InvokeCommandAction Command="{Binding ItemsChangedCommand}" PassEventArgsToCommand="True" />
                                </b:EventTrigger>
                                <b:EventTrigger EventName="SelectedPartChanged">
                                    <b:InvokeCommandAction Command="{Binding SelectedPartChangedCommand}" PassEventArgsToCommand="True" />
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                        </h:Diagram>
                    </h:ScrollViewerTransfor>-->

                    <!--<h:ZoomBox>
                        <Grid Background="Red">
                            <Viewbox>
                                <h:Diagram x:Name="diagram"
                                   Width="{Binding Width}"
                                   Height="{Binding Height}"
                                   Padding="0"
                                   HorizontalAlignment="Stretch"
                                   VerticalAlignment="Stretch"
                                   HorizontalContentAlignment="Stretch"
                                   VerticalContentAlignment="Stretch"
                                   h:Cattach.GuideData="从左侧资源列表中拖动元素放置此区域，选中元素在右侧属性栏和上方工具栏执行相应操作，鼠标拖拽、滚轮放大缩小等"
                                   h:Cattach.GuideTitle="绘图区域"
                                   h:Cattach.UseGuide="True"
                                   AllowDrop="True"
                                   BorderBrush="blue"
                                   BorderThickness="1"
                                   Layout="{Binding Layout}"
                                   LinkDrawer="{Binding LinkDrawer}"
                                   NodesSource="{Binding Nodes}"
                                   SelectedPart="{Binding SelectedPart}"
                                   UseAnimation="False">
                                    <h:Diagram.Background>
                                        <SolidColorBrush Opacity="0.02" Color="Gray" />
                                    </h:Diagram.Background>

                                    <h:Interaction.Behaviors>
                                        <local:DiagramDropTextNodeBehavior NodeType="{Binding NodeType}" />
                                    </h:Interaction.Behaviors>
                                    <h:Interaction.Triggers>
                                        <h:EventTrigger EventName="ItemsChanged">
                                            <h:InvokeCommandAction Command="{Binding ItemsChangedCommand}" PassEventArgsToCommand="True" />
                                        </h:EventTrigger>
                                        <h:EventTrigger EventName="SelectedPartChanged">
                                            <h:InvokeCommandAction Command="{Binding SelectedPartChangedCommand}" PassEventArgsToCommand="True" />
                                        </h:EventTrigger>
                                    </h:Interaction.Triggers>
                                </h:Diagram>
                            </Viewbox>
                        </Grid>
                    </h:ZoomBox>-->
                </Border>
                <Border Margin="10"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Bottom"
                        Background="white"
                        Visibility="{Binding ElementName=diagram, Path=Message, Converter={local:NullToCollapsedConveter}}">
                    <TextBlock Margin="10,6"
                               HorizontalAlignment="Center"
                               VerticalAlignment="Center"
                               Foreground="blue"
                               Text="{Binding ElementName=diagram, Path=Message}" />
                </Border>
            </Grid>

            <Grid Width="150"
                  Height="150"
                  Margin="0,0,0,0"
                  HorizontalAlignment="Right"
                  VerticalAlignment="Bottom">
                <!--  h:TransitionService.IsVisible="{Binding ProjectData.SystemSet.IsLocatorVisible}"  -->
                <!--<h:ScrollViewerLocator x:Name="locator" MaskBackground="white" ScrollViewer="{Binding ElementName=svt1}" />

                <h:TransitionService.VisibleActions>
                    <h:TransitionCollection>
                        <h:TranslateTransition HiddenOrCollapsed="Collapsed" StartPoint="200,0" EndPoint="100,0" />
                    </h:TransitionCollection>
                </h:TransitionService.VisibleActions>-->
            </Grid>
        </Grid>

        <!--<DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static h:DiagramSetting.Instance}, Path=GridBackground}" Value="{x:Null}">
                <Setter TargetName="db" Property="GridBackground" Value="white" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Source={x:Static h:DiagramSetting.Instance}, Path=GridLineBrush}" Value="{x:Null}">
                <Setter TargetName="db" Property="GridLineBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrush}}" />
            </DataTrigger>
        </DataTemplate.Triggers>-->
    </DataTemplate>

    <!--<DataTemplate DataType="{x:Type local:AutoTestResult}">
        <ContentPresenter Content="{Binding Diagram}" />
    </DataTemplate>-->

    <!--<DataTemplate DataType="{x:Type local:AutoTestReportViewPresenter}">
        <DockPanel>
            <GroupBox DockPanel.Dock="Top"
                      Header="最近测试次数">
                <h:Chart Height="300"
                         Padding="20,20,20,40"
                         Style="{DynamicResource {x:Static h:Chart.BarKey}}"
                         UseLegend="False"
                         UseRefreshButton="False"
                         xAxis="{Binding LoginData.xAxis}"
                         xDisplay="{Binding LoginData.xDisplay}"
                         yAxis="{Binding LoginData.yAxis}">
                    <h:Series DisplayName="最近测试次数"
                              Style="{StaticResource {x:Static h:Series.BarKey}}"
                              yDatas="{Binding LoginData.SeriesDatas[0].yDatas}" />

                    <h:Series LineStyle="{StaticResource {x:Static h:Line.AlignmentCenterKey}}"
                              ScatterStyle="{StaticResource {x:Static h:Scatter.AlignmentCenterKey}}"
                              Style="{StaticResource {x:Static h:Series.LineKey}}"
                              yDatas="{Binding LoginData.SeriesDatas[0].yDatas}">
                        <h:MarkPosition AlignmentCenter="True"
                                        MarkValueType="Max" />
                        <h:MarkPosition AlignmentCenter="True"
                                        MarkValueType="Min" />
                    </h:Series>
                </h:Chart>
            </GroupBox>

            <GroupBox DockPanel.Dock="Top"
                      Header="合格比例">
                <h:Chart Height="300"
                         Padding="20,20"
                         UseRefreshButton="False">
                    <h:Series>
                        <h:Pie Data="{Binding UserData.SeriesDatas[0].Data}"
                               Foreground="red,green,blue,purple"
                               Len="120"
                               xDisplay="{Binding UserData.SeriesDatas[0].xDisplay}" />
                    </h:Series>
                    <h:PathLegend />
                </h:Chart>
            </GroupBox>
        </DockPanel>
    </DataTemplate>-->
    <!--<DataTemplate DataType="{x:Type local:AutoTestResultPresenter}">
        <h:PagedDataGrid DataSource="{Binding Collection}">
            <DataGrid.Columns>
                <DataGridTextColumn Binding="{Binding Model.BatchCode}" Header="批次号" />
                <DataGridTextColumn Binding="{Binding Model.Time}" Header="日期" />
                <DataGridTextColumn Binding="{Binding Model.Result}" Foreground="{Binding Model.Result, Converter={x:Static h:Converter.GetStateBrush}}" Header="结果" />
                <DataGridTextColumn Binding="{Binding Model.Description}" Header="描述" />
                <DataGridTextColumn Binding="{Binding Model.User}" Header="操作员" />
                <DataGridTemplateColumn>
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <UniformGrid>
                                <Button Style=""/>
                            </UniformGrid>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </h:PagedDataGrid>
    </DataTemplate>-->
</ResourceDictionary>
